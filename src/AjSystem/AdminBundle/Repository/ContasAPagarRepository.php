<?php

namespace AjSystem\AdminBundle\Repository;

use AjSystem\AdminBundle\Entity\Filter\FilterContasAPagar;
use AjSystem\AdminBundle\Entity\Funcionario;
use Doctrine\ORM\QueryBuilder;

/**
 * ContasAPagarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContasAPagarRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param FilterContasAPagar $filter
     * @param bool $isQuery
     * @return mixed
     */
    public function findConta(FilterContasAPagar $filter, $isQuery = false){

        $qb = $this->createQueryBuilder('c');

        $qb = $this->builderQuery($qb, $filter);

        $qb
            ->orderBy('c.dataPago', 'DESC');

        if ($isQuery)
        {
            return $qb
                ->getQuery()
                ->useQueryCache(true);
        }
        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findPagar(){

        $qb = $this->createQueryBuilder('c');

        $qb->where('c.status = 2');

        $qb->select('SUM(c.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->getSingleScalarResult();
    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findPago(){

        $qb = $this->createQueryBuilder('c');

        $qb->where('c.status = 1');

        $qb->select('SUM(c.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->getSingleScalarResult();
    }

    /**
     * @param QueryBuilder $qb
     * @param FilterContasAPagar $filter
     * @return QueryBuilder
     */
    public function builderQuery(QueryBuilder $qb, FilterContasAPagar $filter)
    {
        try {
            $emConfig = $this->getEntityManager()->getConfiguration();
            $emConfig->addCustomDatetimeFunction('date', 'DoctrineExtensions\Query\Mysql\Date');
        } catch (\Exception $e) {
        }

        if ($filter->getStatus() !== null){
            $qb
                ->where('c.status = :status')
                ->setParameter('status', $filter->getStatus());
        }

        if ($filter->getDataDe()){
            $qb
                ->andWhere('c.dataPago >= :dataDe')
                ->setParameter('dataDe', $filter->getDataDe()->format('Y-m-d'.' '.'00:00:00'));
        }

        if ($filter->getDataAt()){
            $qb
                ->andWhere('c.dataPago <= :dataAt')
                ->setParameter('dataAt', $filter->getDataAt()->format('Y-m-d'.' '.'23:59:59'));
        }

        if ($filter->getTipo()){
            $qb
                ->andWhere('c.tipo = :tipo')
                ->setParameter('tipo', $filter->getTipo());
        }

        if ($filter->getFuncionario()){
            $qb
                ->andWhere('c.funcionario = :funcionario')
                ->setParameter('funcionario', $filter->getFuncionario());
        }

        return $qb;
    }
}
