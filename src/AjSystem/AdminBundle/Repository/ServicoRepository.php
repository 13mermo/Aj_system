<?php

namespace AjSystem\AdminBundle\Repository;

use AjSystem\AdminBundle\Entity\Cliente;
use AjSystem\AdminBundle\Entity\Funcionario;

/**
 * ServicoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServicoRepository extends \Doctrine\ORM\EntityRepository
{
    public function findServicoAll(){

        $qb = $this->createQueryBuilder('s');
        $qb
            ->orderBy('s.dataServico', 'DESC');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    /**
     * @param \DateTime|null $dataDe
     * @param \DateTime|null $dataAt
     * @param Cliente|null $cliente
     * @param Funcionario|null $funcionario
     * @return mixed
     */
    public function findCaixaMensal( \DateTime $dataDe = null, \DateTime $dataAt = null, $cliente = null, $funcionario = null){
        try {
            $emConfig = $this->getEntityManager()->getConfiguration();
            $emConfig->addCustomDatetimeFunction('date', 'DoctrineExtensions\Query\Mysql\Date');
        } catch (\Exception $e) {

        }

        $qb = $this->createQueryBuilder('s');
        $qb->where('s.status != 0');

        if ($dataDe and $dataAt) {
            $qb
                ->andWhere('s.dataServico >= :dataDe')
                ->andWhere('s.dataServico <= :dataAt')
                ->setParameter('dataDe', $dataDe->format('Y-m-d'.' '.'00:00:00'))
                ->setParameter('dataAt', $dataAt->format('Y-m-d'.' '.'23:59:59'));
        }

        if ($cliente) {
            $qb
                ->andWhere('s.cliente = :cliente')
                ->setParameter('cliente', $cliente);
        }

        if ($funcionario) {
            $qb
                ->andWhere('s.responsavel = :funcionario')
                ->setParameter('funcionario', $funcionario);
        }

        $qb->select('SUM(s.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    /**
     * @param \DateTime|null $dataDe
     * @param \DateTime|null $dataAt
     * @param Cliente|null $cliente
     * @param Funcionario|null $funcionario
     * @param null $solicitante
     * @param null $nome
     * @param null $status
     */
    public function findServico(
        $status = null,
        \DateTime $dataDe = null,
        \DateTime $dataAt = null,
        Cliente $cliente = null,
        Funcionario $funcionario = null,
        $nome = null,
        $solicitante = null
    ){
        try {
            $emConfig = $this->getEntityManager()->getConfiguration();
            $emConfig->addCustomDatetimeFunction('date', 'DoctrineExtensions\Query\Mysql\Date');
        } catch (\Exception $e) {

        }
        $qb = $this->createQueryBuilder('s');


        if ($status !== null){
            $qb
                ->where('s.status = :status')
                ->setParameter('status', $status);
        }

        if ($dataDe and $dataAt){
            $qb
                ->andWhere('s.dataServico >= :dataDe')
                ->andWhere('s.dataServico <= :dataAt')
                ->setParameter('dataDe', $dataDe->format('Y-m-d'.' '.'00:00:00'))
                ->setParameter('dataAt', $dataAt->format('Y-m-d'.' '.'23:59:59'));
        }

        if ($cliente){
            $qb
                ->andWhere('s.cliente = :cliente')
                ->setParameter('cliente', $cliente);
        }

        if ($funcionario){
            $qb
                ->andWhere('s.responsavel = :funcionario')
                ->setParameter('funcionario', $funcionario);
        }

        if (!empty($nome)){
            $qb
                ->where(
                    $qb->expr()->like('s.nome', ':nome')
                )
                ->setParameter('nome',"%{$nome}%");
        }

        if (!empty($solicitante)){
            $qb
                ->where(
                    $qb->expr()->like('s.solicitante', ':solicitante')
                )
                ->setParameter('solicitante',"%{$solicitante}%");
        }

        $qb
            ->orderBy('s.dataServico', 'DESC');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    public function findCaixa(){

        $qb = $this->createQueryBuilder('s');

        $qb->where('s.status = 1');

        $qb->select('SUM(s.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    public function findReceber(){

        $qb = $this->createQueryBuilder('s');

        $qb->where('s.status = 2');

        $qb->select('SUM(s.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    public function findTotal(){

        $qb = $this->createQueryBuilder('s');

        $qb->where('s.status = 1');

        $qb->select('SUM(s.valor)');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    public function findServicoReceber(){

        $qb = $this->createQueryBuilder('s');
        $qb
            ->where('s.status = 2')
            ->orderBy('s.dataServico', 'DESC');

        return $qb
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }
}
